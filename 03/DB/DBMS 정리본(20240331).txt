-- 2024/03/28

-- 선택형 방식
SELECT * FROM EMP;
-- EMP 테이블 전체출력
SELECT * FROM DEPT;
-- DEPT 테이블 전체출력

-- Q.1 부서번호가 10번인 사람출력
-- 해석 EMP의 전체부분을 확인하고 부서번호가 10번 즉 조건(WHERE)이 (DEPTNO=10)이기 때문에
-- 총정리하면 SELECT * FROM EMP WHERE DEPTNO = 10;이 결과값이 된다.

SELECT * FROM EMP
WHERE DEPTNO = 10;

-- Q.2 부서번호가 10번인 사람 중 사원번호(EMPNO),이름(ENAME),월급(SAL)만 출력
-- 총 정리하면 SELECT EMPNO(사원번호), ENAME(이름), SAL(월급)
-- FROM EMP WHERE DEPTNO=10;

SELECT EMPNO, ENAME, SAL FROM EMP
WHERE DEPTNO = 10;

-- Q.3 입사일이 1980/12/17인 사원의 이름, 부서번호, 월급출력
-- 우선 참조할 테이블이 EMP이고 입사일이 HIREDATE이며 
-- 사원의이름(ENAME), 부서번호(DEPTNO), 월급(SAL)
-- 조건이 1980/12/17 즉 HIREDATE 이기 때문에 WHERE HIREDATE = '1980/12/17'(DATE는문자)

SELECT ENAME, DEPTNO, SAL FROM EMP 
WHERE HIREDATE='1980/12/17';

-- Q.4 직업이 MANAGER인 사람의 모든정보 출력 / MANAGER가 아닌 사람의 모든 정보출력
-- 참조할 테이블이 EMP 모든정보기 떄문에 *사용 조건이 MANAGER를 구하기때문에 WHERE문사용
-- JOB테이블에 직업이 있기 때문에 WHERE JOB = 'MANAGER' 아닌것은 <>기호 또는 !기호 사용

SELECT * FROM EMP WHERE JOB = 'MANAGER';
SELECT * FROM EMP WHERE JOB <> 'MANAGER';
SELECT * FROM EMP WHERE JOB != 'MANAGER';

-- Q.5 급여가 1000 이상인 사람의 이름, 급여, 부서번호를 급여가 높은 순으로 출력
-- 참조할 테이블은 EMP 이름(ENAME),급여(SAL),부서번호(DEPTNO)이고 조건은
-- 급여(SAL)가 1000이상 급여가 높은순(ORDER BY SAL DESC)으로 정렬이기 때문에
-- 낮은순은 ORDER BY SQL ASC(생략가능) 

SELECT ENAME, SAL, DEPTNO FROM EMP WHERE SAL >= 1000 ORDER BY SAL DESC;
SELECT ENAME, SAL, DEPTNO FROM EMP WHERE SAL >= 1000 ORDER BY SAL ASC;
SELECT ENAME, SAL, DEPTNO FROM EMP WHERE SAL >= 1000 ORDER BY SAL;

-- Q.6 부서번호 10,20인 사원의 이름,급여,부서번호
-- 참조하는 테이블이 EMP 테이블이고 조회할 내용이 이름(ENAME), 급여(SAL), 부서번호(DEPTNO)
-- 조건(WHERE)이 부서번호(DEPTNO)10,20이기 때문에 합집합개념으로 UNION이라는 함수를
-- 이용하는게 편함 해당내용을 정리하면

SELECT ENAME, SAL, DEPTNO FROM EMP WHERE DEPTNO = 10
UNION
SELECT ENAME, SAL, DEPTNO FROM EMP WHERE DEPTNO = 20;

-- Q.7 부서번호 10인 사원을 제외하고 나머지의 사원번호,이름,급여,부서번호
-- 참조 테이블이 EMP이고 조회할 내용이 사원번호(EMPNO), 이름(ENAME), 급여(SAL), 
-- 부서번호(DEPTNO)
-- 부서번호 10번을 제외했기 때문에 MINUS 함수를 사용한다.
-- 내용을 총정리하면

SELECT EMPNO, ENAME, SAL, DEPTNO FROM EMP
MINUS
SELECT EMPNO, ENAME, SAL, DEPTNO FROM EMP
WHERE DEPTNO=10;

-- Q.8 전체에서 부서번호가 20인 사람만 출력하세요(함수 INTERSECT 사용)
-- 참조 테이블이 EMP이고 조회할 내용이 전체(*) 이중에 부서번호 20번만을 포함시키기 때문에
-- 교집합 함수인 INTERSECT를 활용한다.

SELECT * FROM EMP
INTERSECT
SELECT * FROM EMP WHERE DEPTNO='20';

-- Q.9 사원이름이 S로 끝나는 사원의 모든 데이터 출력
-- 테이블 EMP 전체참조(*) / 조건 WHERE S로끝나는 거기 때문에 '%S'를 사용함
-- SELECT * FROM EMP WHERE ENAME LIKE '%S';

SELECT * FROM EMP WHERE ENAME LIKE '%S';

-- Q.10 2가지 이상의 WHERE / 30번 부서에서 근무하는 사원 중 JOB이 SALESMAN인 사원의
-- 사원번호, 이름, 직책, 급여, 부서번호 출력
-- TABLE EMP 사원번호(EMPNO), 이름(ENAME), 직책(JOB), 부서번호(DEPTNO)
-- 방식은 2가지 집합함수사용/AND 사용
-- SELECT ENAME, JOB, DEPTNO FROM EMP WHERE DEPTNO = 20 
-- UNION
-- SELECT ENAME, JOB, DEPTNO FROM EMP WHERE JOB = 'SALESMAN'
-- WHERE DEPTNO = 20 AND JOB = 'SALESMAN' 
-- (DEPTNO = 20, JOB = 'SALESMAN' 이니깐 AND를 사용 또는의 경우 OR사용)

SELECT ENAME, JOB, DEPTNO FROM EMP WHERE DEPTNO = 30 
INTERSECT
SELECT ENAME, JOB, DEPTNO FROM EMP WHERE JOB = 'SALESMAN';

SELECT ENAME, JOB, DEPTNO FROM EMP
WHERE DEPTNO = 30 AND JOB = 'SALESMAN'; 

-- Q.11 사원이름에 E가 포함/ 30번부서의 사원중 급여가 1000~2000 사이가 아닌 전체정보를
-- 급여 내림차순으로 정렬
-- 테이블 전체정보기 때문에 SELECT * FROM EMP / 조건 사원이름 E, 30번부서 사원,
-- 급여 1000~2000사이 아님, 내림차순(WHERE LIKE '%E%', DEPTNO = 30, 
-- BETWEEN 1000 AND 2000, ORDER BY (주체) DESC)

SELECT * FROM EMP
WHERE ENAME LIKE '%E%' AND DEPTNO =30 AND SAL NOT BETWEEN 1000 AND 2000
ORDER BY SAL DESC;

-- Q.12 주가수당이 존재하지 않는 사람의 정보 출력 / 존재하는 사람 정보출력
-- 테이블은 EMP를 참조 / 전체정보(*), 조건 존재하지 않는 주가수당(COMM) IS NULL 사용
-- 존재하는을 찾을때는 NOT NULL

SELECT * FROM EMP
WHERE COMM IS NULL; 

SELECT * FROM EMP
WHERE COMM IS NOT NULL; 

-- Q.13 전체정리 / 주가수당이 존재하지 않고 상급자가 있고 직급이 MANAGER, CLERK인 사원중에서
-- 사원이름의 두번째 글자가 L이아닌 사원정보 출력
-- 테이블은 EMP 참조 / 전체정보(*) /
-- 조건 주가수당(COMM) 존재X, 상급자(MGR) 존재(IS NOT NULL), 직급(JOB) 2가지 이상이기 때문에
-- 편의상 IN을 사용(MANAGER,CLERK)
-- 사원이름의 두번째
-- 글자가 L이아닌 사원정보 출력(_순위번째를 의미) _?(2번쨰 ?탐색)

SELECT * FROM EMP
WHERE COMM IS NULL 
AND MGR IS NOT NULL 
AND JOB IN ('MANAGER','CLERK')
AND ENAME LIKE '_L%';

-- Q.14 내장함수 정리 / 이름 대문자,소문자 분류(UPPER,LOWER), INITCAP(첫글자만 대문자)

SELECT ENAME, UPPER(ENAME) AS 대문자, LOWER(ENAME) 소문자, INITCAP(ENAME)
FROM EMP;

-- Q.15 내장함수 정리 / 이름길이(LENGTH)
SELECT ENAME, LENGTH(ENAME) AS 길이
FROM EMP;

-- Q.16 내장함수 / 문자출력(SUBSTR)
-- 문자의 제일앞에서 부터 3개추출 / 문자의 제일 뒤에껏만 추출
SELECT ENAME, SUBSTR(ENAME,1,3) AS 문자출력
FROM EMP;

SELECT ENAME, SUBSTR(ENAME,-1,1) AS 문자출력
FROM EMP;

-- Q 17 내장함수 / 위치값 출력(INSTR) 입력하지 않을 땐 기본은 1이궁
-- -1은 뒤에서 채우는 것 뒤에 숫자는 뒤에서 몇번째 앞에서 몇번째를 의미 
SELECT INSTR('STARS','S'),INSTR('STARS','S',-1),INSTR('STARS','S',-1,2)
FROM DUAL;

-- 2024/03/29

-- Q.18 ENAME에서 처음부터 2글자만 추출하여 소문자로 출력
-- EMP 테이블에 ENAME 참조하는 것이고 특정 글자만(SUBSTR) 추출하여 소문자(LOWER)로 출력
SELECT ENAME, LOWER(SUBSTR(ENAME,1,2))
FROM EMP;

-- Q.19 내장함수 / 기존에 있는 데이터를 특정 문자/숫자로 변경하는 것(REPLACE)
-- ENAME에서 S를 s로 변경하여 출력
-- EMP 테이블의 ENAME이 주체 항목변경이기 때문에(REPLACE) 사용 S를 s로 변환
SELECT ENAME, REPLACE(ENAME,'S','s')
FROM EMP;

-- Q.20 내장함수 LPAD(왼쪽부터 특정단어로 글자수 채우기)
--             RPAD(오른쪽부터 특정단어로 글자수 채우기)
-- EMP 테이블의 사원이름 항목을 오른쪽/왼쪽 부터 *로 총10자리가 되게끔 채우기
-- EMP 테이블 ENAME 항목설정 / RPAD,LPAD 사용
SELECT ENAME, LPAD(ENAME,10,'*')
FROM EMP;
SELECT ENAME, RPAD(ENAME,10,'*')
FROM EMP;

-- Q.21 문자열 연결 CONCAT / || 기호사용
-- EMP 테이블의 사원이름과 직업항목을 연결하여 EX) 홍길동:직업 이런식으로 표기하기
-- EMP 테이블의 사원이름(ENAME) 항목 직업(JOB)항목을 연결 CONCAT / || 사용
SELECT CONCAT(CONCAT(ENAME,':'),JOB) AS "이름과 직업"
FROM EMP;

SELECT ENAME || ':' || JOB AS "이름과 직업"
FROM EMP;

-- Q.22 사원번호 앞2자리만 표현하고 뒤2자리는 별표
-- EMP 테이블의 사원번호 EMPNO / 앞2자리 SUBSTR / 뒤 2자리 RPAD 사용
-- 앞2자리 추출을 위해 SUBSTR 사용하여 2자리 추출 이후 RPAD를 활용 N번째자리까지 '*' 입력
SELECT ENAME, RPAD(SUBSTR(EMPNO,1,2),LENGTH(EMPNO),'*')
FROM EMP;

-- Q.23 공백제거 LTRIM(왼쪽공백제거),RTRIM(오른쪽공백제거)
SELECT TRIM('  ORACLE  ')
FROM DUAL;

SELECT LTRIM('  ORACLE  ')
FROM DUAL;

SELECT RTRIM('  ORACLE  ')
FROM DUAL;

-- Q.23 숫자함수 ROUND(반올림), TRUNC(버림), CEIL(가장 가까운 큰 정수), 
-- FLOOR( 가장 작은 정수), MOD(나머지)
-- ROUND(반올림)
SELECT ROUND(123.567,1), ROUND(123.567,2), ROUND(123.567,-1)
FROM DUAL;
-- TRUNC(버림)
SELECT TRUNC(15.79,1), TRUNC(15.79,-1)
FROM DUAL;
-- CEIL,FLOOR 가장 가까운 큰수, 작은 정수를 반환
SELECT CEIL(3.14), FLOOR(3.14)
FROM DUAL;
-- MOD(나머지)
SELECT MOD(15,6)
FROM DUAL;

-- Q.24 날짜 함수 SYSDATE 오늘,SYSDATE+1 내일, SYSDATE-1 어제
-- ADD MONTHS(달추가), INTERVAL(날짜 더하기)
SELECT SYSDATE,SYSDATE+1,SYSDATE-1
FROM DUAL;

SELECT ADD_MONTHS(SYSDATE,3)
FROM DUAL;

-- Q.25 입사 10주년이 되는 사원의 번호, 이름, 입사일, 입사 10년후 날짜 출력 / 날짜 차이계산
SELECT EMPNO,ENAME,HIREDATE,ADD_MONTHS(HIREDATE,120)
FROM EMP;

SELECT EMPNO,ENAME,HIREDATE,(HIREDATE+(INTERVAL '10' YEAR))
FROM EMP;

SELECT EMPNO, ENAME, HIREDATE, SYSDATE, 
TRUNC(MONTHS_BETWEEN(SYSDATE,HIREDATE)) || '개월' AS "근무개월수"
FROM EMP;

SELECT EMPNO, ENAME, HIREDATE, SYSDATE, 
CONCAT(TRUNC(MONTHS_BETWEEN(SYSDATE,HIREDATE)),'개월') AS "근무개월수"
FROM EMP;

-- Q.26 날짜 함수(NEXT_DAY) 다가오는 요일 날짜 확인가능, (LAST_DAY) 해당달의 마지막날
-- 확인가능
SELECT NEXT_DAY(SYSDATE,'월요일'), LAST_DAY(SYSDATE)
FROM DUAL;

-- Q.27 형변환함수 / TO_CHAR(문자열 변환), TO_NUMBER(숫자형 변환)
SELECT TO_CHAR(SYSDATE, 'MM') FROM DUAL;
SELECT TO_CHAR(SYSDATE, 'DD') FROM DUAL;
SELECT TO_CHAR(SYSDATE, 'SS') FROM DUAL;
SELECT TO_CHAR(SYSDATE, 'MI') FROM DUAL;
SELECT TO_CHAR(SYSDATE, 'MON') FROM DUAL;
SELECT TO_CHAR(SYSDATE, 'DAY') FROM DUAL;

-- Q.28 숫자 자릿수 표현 할때 사용하는 것(999 = 숫자)
SELECT SAL, TO_CHAR(SAL,'$999,999') SAL_$
FROM EMP;
